--- myman.py	2014-05-12 02:25:43.076252559 -0700
+++ myman2.py	2014-05-12 02:32:20.105241120 -0700
@@ -1,7 +1,6 @@
 #!/usr/bin/env python
 
 import os
-import re
 import sys
 import MySQLdb
 import time
@@ -99,33 +98,36 @@
 		run_mysql(cnf)	
 		cur = connMySQL(name)
 		setReplMaster(cur)
-
-def status_mysql(cnf):
+def statusMySQL(cnf):
 	s = MySQLDConfig(cnf).mysqld_vars['socket']
 	if os.path.exists(s):
-		print 'The status is running'
+		print '\033[40;36m' + 'The status is running' + '\033[0m'
 		return True
 	else:
-		print 'The status is not running'
+		print '\033[40;36m' + 'The status is not running' + '\033[0m'
 		return False
 
-def start_mysql(cnf,datadir):
-	if not status_mysql(cnf):
+def startMySQL(cnf,datadir):
+	if not statusMySQL(cnf):
 		if os.path.exists(datadir) and os.path.exists(cnf):
 			setOwner(datadir)
 			run_mysql(cnf)
-			s = 'start the Instance ...OK!'
+			s = 'Start the Instance ...OK'
 		else:
-			s = 'The instance is not exists,please create first!'
-		print s
+			s = 'The instance is not exists,please create first'
+	#else:
+	#	s = 'The Instance\'s status is running'
+		print '\033[40;33m' + s + '\033[0m'
 
-def stop_mysql(cnf):
-	if status_mysql(cnf):
+def stopMySQL(cnf):
+	if statusMySQL(cnf):
 		s = MySQLDConfig(cnf).mysqld_vars['socket']
 		cmd = 'mysqladmin shutdown -S %s' % s
 		p = Popen(cmd,stdout=PIPE,shell=True)
-		s = 'stop the Instance ...succeed!'
-		print s
+		s = 'Stop the Instance ...succeed'
+	#else:
+	#	s = 'The Instance\'s status is not running'
+		print '\033[40;33m' + s + '\033[0m'
 
 def setReplMaster(cur):
 	sql = "grant replication slave on *.* to %s@'%%' identified by '%s'" % (REPLICATION_USER, REPLICATION_PASS)
@@ -145,6 +147,7 @@
 		cur = conn.cursor()
 		return cur
 	
+
 def diffVariables(name):
 	cnf = getCNF(name)
 	cur = connMySQL(name)
@@ -164,53 +167,34 @@
 		mc.save()
 
 def findLogPos(s):
-	rlog = re.compile(r"MASTER_LOG_FILE='(\S+)',",re.I)
-	rpos = re.compile(r"MASTER_LOG_POS=(\d+);$",re.I)
-	log = rlog.search(s)
-	pos = rpos.search(s)
-	if log and pos:
-		return log.group(1),int(pos.group(1))
-	else:
-		return (None,None)
-
+		import re
+		rlog = re.compile(r"MASTER_LOG_FILE='(\S+)',",re.I)
+		rpos = re.compile(r"MASTER_LOG_POS=(\d+);$",re.I)
+		log = rlog.search(s)
+		pos = rpos.search(s)
+		if log and pos:
+			return log.group(1), int(pos.group(1))
+		else:
+			return (None,None)
 def getLogPos(f):
 	with open(f) as fd:
 		for l in fd:
 			f,p = findLogPos(l)
-			if f or p:
-				return f, p
-
-def changeMaster(cur, 
-				host,
-				port,
-				user,
-				password,
-				log_file,
-				log_pos):
+			if f and p:
+				return f,p
+		
+def changeMaster(cur, host,port,user,password,log_file=None,log_pos=None):
 	sql = """change master to 
-				master_host='%s',
-				master_port=%s,
-				master_user='%s',
-				master_password='%s',
-				master_log_file='%s',
-				master_log_pos=%s
-				""" % (host,port,user,password,log_file,log_pos)
+			master_host='%s',
+			master_port=%s,
+			master_user='%s',
+			master_password='%s'""" % (host,port,user,password)
+	if log_file:
+		sql += """,master_log_file='%s',master_log_pos=%s""" % (log_file,log_pos)
+		
 	print sql
 	cur.execute(sql)
 
-def changeMasternew(cur, 
-				host,
-				port,
-				user,
-				password):
-	sql = """change master to 
-				master_host='%s',
-				master_port=%s,
-				master_user='%s',
-				master_password='%s',
-				""" % (host,port,user,password)
-	cur.execute(sql)
-
 def backupMySQL(name):
 	cnf = getCNF(name)
 	if os.path.exists(cnf):
@@ -231,11 +215,11 @@
 	return p.returncode
 
 def restoreMySQL(name,port,sqlfile,**kw):
-	createInstance(name,port,**kw)
+	createInstance(name, port,'slave',**kw)
 	cnf = getCNF(name)
 	if os.path.exists(cnf):
 		mc = MySQLDConfig(cnf)
-		cmd = "mysql --host 127.0.0.1 --user root --port %s < %s" % (mc.mysqld_vars['port'],sqlfile)
+		cmd = 'mysql --host 127.0.0.1 --user root --port %s < %s' % (mc.mysqld_vars['port'],sqlfile)
 		runMySQLCmd(cmd)
 
 def main():
@@ -244,12 +228,11 @@
 	instance_name = opt.name
 	instance_port = opt.port
 	command = opt.cmd
-	print instance_name
-	print instance_port
-	print command
-        print 'The Instance name is %s, And the Port is %s' % (instance_name,instance_port)
-        cnf = os.path.join(MYSQL_CONF_DIR, "%s.cnf" % instance_name)
-        datadir = os.path.join(MYSQL_DATA_DIR, instance_name)	
+	print '\033[40;31m' + 'The Instance name is %s, And the Port is %s' % (instance_name,instance_port) + '\033[0m'
+	cnf = os.path.join(MYSQL_CONF_DIR, "%s.cnf" % instance_name)
+	datadir = os.path.join(MYSQL_DATA_DIR, instance_name)
+
+
 	if command == 'create':
 		if not args:		
 			createInstance(instance_name, instance_port)
@@ -258,7 +241,7 @@
 			serverid = args[1]
 			mysqld_options = {'server-id':serverid}
 			if dbtype == 'master':
-				mysqld_options['log-bin'] = 'mysql-bin'				
+				mysqld_options['log-bin'] = 'mysql-bin'	
 				createInstance(instance_name,
 							instance_port,
 							dbtype,
@@ -268,6 +251,10 @@
 				port = args[3]
 				user = REPLICATION_USER
 				password = REPLICATION_PASS
+				#mysqld_options['master-host'] = master_host
+				#mysqld_options['master-port'] = master_port
+				#mysqld_options['master-user'] = REPLICATION_USER
+				#mysqld_options['master-password'] = REPLICATION_PASS
 				mysqld_options['replicate-ignore-db'] = 'mysql'
 				mysqld_options['skip-slave-start'] = None
 				createInstance(instance_name,
@@ -275,14 +262,13 @@
 							dbtype,
 							**mysqld_options)
 				cur = connMySQL(instance_name)
-				changeMasternew(cur,host,port,user,password)
-
+				changeMaster(cur,host,port,user,password)
 	elif command == 'start':
-		start_mysql(cnf,datadir)
+		startMySQL(cnf,datadir)
 	elif command == 'status':
-		status_mysql(cnf)
+		statusMySQL(cnf)
 	elif command == 'stop':
-		stop_mysql(cnf)
+		stopMySQL(cnf)
 	elif command == 'check':
 		diffVariables(instance_name)	
 	elif command == 'adjust':
@@ -298,13 +284,15 @@
 		master_user = REPLICATION_USER
 		master_password = REPLICATION_PASS
 		sqlfile = args[3]
-		master_log_file, master_log_pos = getLogPos(sqlfile)
-		mysqld_options = {'server-id':serverid}
+		log_file, log_pos = getLogPos(sqlfile)
+		mysqld_options = {'server-id': serverid}
 		mysqld_options['replicate-ignore-db'] = 'mysql'
 		mysqld_options['skip-slave-start'] = None
-		restoreMySQL(instance_name,instance_port,sqlfile,**mysqld_options)
+		restoreMySQL(instance_name, instance_port, sqlfile, **mysqld_options)
 		cur = connMySQL(instance_name)
-		changeMaster(cur,master_host,master_port,master_user,master_password,master_log_file,master_log_pos)
-
+		changeMaster(cur,master_host,master_port,master_user,master_password,log_file,log_pos)
 if __name__ == '__main__':
 	main()
+
+
+
